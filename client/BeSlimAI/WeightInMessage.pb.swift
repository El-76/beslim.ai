// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: WeightInMessage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Slimtest_WeightInMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var segmentOutMessages: [Slimtest_SegmentOutMessage] = []

  var distancesBetween: [Float] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "slimtest"

extension Slimtest_WeightInMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WeightInMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "segmentOutMessages"),
    3: .same(proto: "distancesBetween"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.segmentOutMessages)
      case 3: try decoder.decodeRepeatedFloatField(value: &self.distancesBetween)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segmentOutMessages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.segmentOutMessages, fieldNumber: 1)
    }
    if !self.distancesBetween.isEmpty {
      try visitor.visitPackedFloatField(value: self.distancesBetween, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Slimtest_WeightInMessage, rhs: Slimtest_WeightInMessage) -> Bool {
    if lhs.segmentOutMessages != rhs.segmentOutMessages {return false}
    if lhs.distancesBetween != rhs.distancesBetween {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
