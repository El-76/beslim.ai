// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: SegmentOutMessage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Slimtest_SegmentOutMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionID: String = String()

  var productClass: String = String()

  var pointsDistancesBetween: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "slimtest"

extension Slimtest_SegmentOutMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SegmentOutMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sessionId"),
    2: .same(proto: "productClass"),
    3: .same(proto: "pointsDistancesBetween"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sessionID)
      case 2: try decoder.decodeSingularStringField(value: &self.productClass)
      case 3: try decoder.decodeRepeatedInt32Field(value: &self.pointsDistancesBetween)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 1)
    }
    if !self.productClass.isEmpty {
      try visitor.visitSingularStringField(value: self.productClass, fieldNumber: 2)
    }
    if !self.pointsDistancesBetween.isEmpty {
      try visitor.visitPackedInt32Field(value: self.pointsDistancesBetween, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Slimtest_SegmentOutMessage, rhs: Slimtest_SegmentOutMessage) -> Bool {
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.productClass != rhs.productClass {return false}
    if lhs.pointsDistancesBetween != rhs.pointsDistancesBetween {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
